"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) { _arr.push(_step.value); if (i && _arr.length === i) break; } return _arr; } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } };

var _defineProperty = function (obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); };

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

module.exports = controllable;

var React = _interopRequire(require("react"));

var keys = _interopRequire(require("object-keys"));

var omit = _interopRequire(require("lodash.omit"));

var pick = _interopRequire(require("lodash.pick"));

var mapValues = _interopRequire(require("lodash.mapvalues"));

var isArray = _interopRequire(require("isarray"));

var mkFirstFunc = function (method) {
  return function (str) {
    return str.slice(0, 1)[method]() + str.slice(1);
  };
};
var lowerFirst = mkFirstFunc("toLowerCase");
var capFirst = mkFirstFunc("toUpperCase");
var toCallbackName = function (prop) {
  return "on" + (prop === "value" ? "" : capFirst(prop)) + "Change";
};
var fromDefaultName = function (prop) {
  return lowerFirst(prop.slice(7));
};
var mapKeys = function (obj, mapper) {
  var newObj = {};
  for (var k in obj) {
    if (obj.hasOwnProperty(k)) {
      newObj[mapper(k)] = obj[k];
    }
  }
  return newObj;
};
var merge = function () {
  for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
    sources[_key] = arguments[_key];
  }

  var target = {};
  sources.forEach(function (source) {
    for (var k in source) {
      if (!source.hasOwnProperty(k)) continue;
      var val = source[k];

      // Treat `undefined` the same as a missing key. React also does this for
      // `null`, but that only works because their controlled components can use
      // an empty string to represent "no value." In the general case, we need
      // some way to control a component but give it "no value." We use `null`
      // for that. See GH-1
      if (val === undefined) continue;

      target[k] = val;
    }
  });
  return target;
};

var isDefault = function (value, key) {
  return /^default/.test(key);
};
var omitDefaults = function (props) {
  return omit(props, isDefault);
};
var pickDefaults = function (props) {
  return pick(props, isDefault);
};

function controllable() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var Component = undefined,
      reducers = undefined;

  // Support [Python-style decorators](https://github.com/wycats/javascript-decorators)
  if (args.length === 1) {
    var _ref = args;

    var _ref2 = _slicedToArray(_ref, 1);

    reducers = _ref2[0];

    return function (Component) {
      return controllable(Component, reducers);
    };
  }

  var _ref3 = args;

  var _ref32 = _slicedToArray(_ref3, 2);

  Component = _ref32[0];
  reducers = _ref32[1];

  if (isArray(reducers)) {
    // If you pass an array of prop names, you'll essentially use the callbacks
    // as action creators. So we need to build reducers for those.
    var controllableProps = reducers;
    reducers = {};
    controllableProps.forEach(function (prop) {
      var callbackName = toCallbackName(prop);
      reducers[callbackName] = function (currentState, value) {
        return _defineProperty({}, prop, value);
      };
    });
  }

  // Create action creators from the reducers.
  var actionCreators = mapValues(reducers, function (reducer) {
    return function () {
      var _this = this;

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      // Calculate the new state.
      var currentProps = merge(this.state, omitDefaults(this.props), this.boundActionCreators);
      var newState = reducer.apply(undefined, [currentProps].concat(args));

      // Update the state.
      this.setState(newState);

      // If there are callbacks for the changed values, invoke them.
      keys(newState).forEach(function (prop) {
        var newValue = newState[prop];
        var callbackName = toCallbackName(prop);
        var cb = _this.props[callbackName];
        if (cb) cb(newValue);
      });
    };
  });

  return (function (_React$Component) {
    function ControllableWrapper() {
      var _this = this;

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      _classCallCheck(this, ControllableWrapper);

      _get(Object.getPrototypeOf(ControllableWrapper.prototype), "constructor", this).apply(this, args);

      // Get the initial state from the `default*` props.
      this.state = mapKeys(pickDefaults(this.props), fromDefaultName);

      // Create bound versions of the action creators.
      this.boundActionCreators = mapValues(actionCreators, function (fn) {
        return fn.bind(_this);
      });
    }

    _inherits(ControllableWrapper, _React$Component);

    _createClass(ControllableWrapper, {
      render: {
        value: function render() {
          var props = merge(this.state, omitDefaults(this.props), this.boundActionCreators);
          return React.createElement(Component, props);
        }
      }
    });

    return ControllableWrapper;
  })(React.Component);
}